switchtolayout;#make sure it is layoutmode
closeall;
deleteall;
clear;

groupscope("::model");#go to the main scope
um = 10^-6;

dirname = "D:\Dohyeon_Lee\metamaterial_solver\Helmholtz-adjoint-solver\Vanilla inverse solver\test\FDTD_TEMP";
filename_RI = dirname + "\index.txt";
filename_FIELD = dirname + "\field.mat";
filename_save = dirname + "\result.mat";
filename_fsp= dirname + "\temp.fsp";
filename_optical= dirname + "\optical.mat";

matlabload(filename_optical);

save(filename_fsp);

##in the mat file are the following variables
#base_index=1.336;
#lambda=0.532;
#return_trans=true;
#return_ref=true;
#return_vol=true;
#is_plane_wave=true;
#phi;
#theta;
#para_pol;
#ortho_pol;
#shutoff_min = 1e-8;
#dt_stability_factor = 0.999;

?base_index;
?lambda;
?return_trans;
?return_ref;
?return_vol;
?is_plane_wave;
?phi;
?theta;
?para_pol;
?ortho_pol;
?shutoff_min;
?dt_stability_factor;

addimport;
set("name","refractive_index");

# choose the desired options
file_units = "m";

# import the data from file
importnk(filename_RI,file_units);

min_x=get("x min");
max_x=get("x max");

min_y=get("y min");
max_y=get("y max");

min_z=get("z min");
max_z=get("z max");

dx=get("dx");
dy=get("dy");
dz=get("dz");

x_num=get("data x points");
y_num=get("data y points");
z_num=get("data z points");

print('min/max x = '+num2str(min_x)+'  /  '+num2str(max_x));
print('min/max y = '+num2str(min_y)+'  /  '+num2str(max_y));
print('min/max z = '+num2str(min_z)+'  /  '+num2str(max_z));

addfdtd;
#size of the volume
set("dimension",2);  #  1 = 2D, 2 = 3D
set("x min",min_x);
set("x max",max_x);
set("y min",min_y);
set("y max",max_y);
set("z min",min_z);
set("z max",max_z);
#boundary
set('x min bc','Bloch');
set('y min bc','Bloch');
set('z min bc','PML');
set('z max bc','PML');
set('pml profile',3);
#base index
set('index',base_index);
#mesh size
set('min mesh step',0);

set('mesh type',2);

set('define x mesh by',4);
set('mesh cells x',x_num-1);

set('define y mesh by',4);
set('mesh cells y',y_num-1);

set('define z mesh by',4);
set('mesh cells z',z_num-1);
set("auto shutoff min", shutoff_min);
set("dt stability factor", dt_stability_factor);
#mesh_x=getresult("FDTD","x"); #get mesh location


if(return_trans){
addpower;
set("name","field_profile_trans");
set("monitor type",7);  # 2D z-normal

set("x min",min_x);
set("x max",max_x);
set("y min",min_y);
set("y max",max_y);

set("z",max_z);

}
if(return_ref){
addpower;
set("name","field_profile_ref");
set("monitor type",7);  # 2D z-normal

set("x min",min_x);
set("x max",max_x);
set("y min",min_y);
set("y max",max_y);

set("z",min_z);

}

if(is_plane_wave)
{
    addplane;
    set("name","pol1");
    set("injection axis","z");
    set("angle theta",theta/pi*180);
    set("angle phi",phi/pi*180);
    set("amplitude",abs(para_pol));
    set("phase",angle(para_pol)/pi*180);


    set("x min",min_x);
    set("x max",max_x);
    set("y min",min_y);
    set("y max",max_y);
    set("polarization angle",0);
    
    set("z",dz);
    
    set("center wavelength",lambda*um);
    set("wavelength span",0);
    
    addplane;
    set("name","pol2");
    set("injection axis","z");
    set("angle theta",theta/pi*180);
    set("angle phi",phi/pi*180);
    set("amplitude",abs(ortho_pol));
    set("phase",angle(ortho_pol)/pi*180);

    set("x min",min_x);
    set("x max",max_x);
    set("y min",min_y);
    set("y max",max_y);
    set("polarization angle",90);
       
    
    set("z",dz);
    
    set("center wavelength",lambda*um);
    set("wavelength span",0);
}else{
    addimportedsource;
    
    importdataset(filename_FIELD);
    #set("injection axis",3);
    
    set("x",0);
    set("y",0);
    
    set("x",-get("x min"));
    set("y",-get("y min"));
    
    set("z",dz);
    
    set("center wavelength",lambda*um);
    set("wavelength span",0);
}

if(return_vol){
addpower;
set("name","field_profile_vol");
set("monitor type",8);  # 2D z-normal

set("x min",min_x);
set("x max",max_x);
set("y min",min_y);
set("y max",max_y);

set("z min",min_z+2*dz);
set("z max",max_z-dz);

}




#run the simulation
t_start = now;
run;
t_code = now - t_start;
? 'Total elapsed time: ' + num2str(t_code/1000) + 's';
#collect result
res_vol = 0;
res_trans = 0;
res_ref = 0;

if(return_vol){res_vol = getresult("field_profile_vol", "E");}
if(return_trans){res_trans = getresult("field_profile_trans", "E");}
if(return_ref){res_ref = getresult("field_profile_ref", "E");}


matlabsave(filename_save,res_vol,res_trans,res_ref);


